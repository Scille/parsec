# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  python.version: '3.6'
  postgresql.version: '10'
  winfsp.version: '1.7.20172'
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 -v \
    --cov=parsec --cov-config=setup.cfg --cov-append --cov-report= \
  debug.stress_flaky_tests: 0  # Repeat all flaky tests X times

jobs:


#################################################################################
# Step 0: Wheel build


- job: 's0_build_wheel'
  displayName: 'Build wheel'
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      pip install -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      python setup.py bdist_wheel
    displayName: 'Build Wheel'
  - publish: dist/
    artifact: wheel



- job: 's2_linux_snap_build'
  displayName: 'Linux snap build'
  timeoutInMinutes: 60
  pool:
    # 18.04 requested to build a core18 image with --destructive-mode
    vmImage: 'ubuntu-18.04'
  steps:
  - checkout: self
    submodules: true
  - bash: |
      set -eux
      sudo apt-get update
      sudo snap install snapcraft --classic
      snapcraft --version
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      cp -R $(Build.SourcesDirectory)/packaging/snap snapbuild
      cd snapbuild
      mkdir src
      cp -R $(Build.SourcesDirectory)/parsec src
      cp $(Build.SourcesDirectory)/setup.py src
      cp $(Build.SourcesDirectory)/README.rst src
      cp $(Build.SourcesDirectory)/HISTORY.rst src
      VERBOSE_TAG=`git -C $(Build.SourcesDirectory) describe --tag`
      sed -i "s#^\\(__version__ = \\).*\$#\\1'$VERBOSE_TAG'#" src/parsec/_version.py
      sed -i "s/__PARSEC_VERSION__/$VERBOSE_TAG/" snap/snapcraft.yaml
      snapcraft --destructive-mode
      mkdir dist
      cp parsec*.snap dist
    displayName: 'Build snap'
    workingDirectory: $(Agent.TempDirectory)
  - publish: $(Agent.TempDirectory)/snapbuild/dist
    artifact: linux_amd64_snap


- job: 's3_linux_snap_test_ubuntu'
  displayName: 'Never trust a snap'
  dependsOn: s2_linux_snap_build
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Note there no point specifying Python version given snap doesn't take it into account
  - checkout: none
  - download: current
    artifact: linux_amd64_snap
  - bash: |
      set -eux
      sudo apt-get update
      # TODO: xvfb doesn't currently work
      # sudo apt-get install -y xvfb xorg
      sudo snap install --classic --dangerous $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
      parsec.cli --version
      # Make sure snap contains core but not backend
      NOT_AVAILABLES=$(parsec.cli --help | grep -i "not available")
      test "$(echo $NOT_AVAILABLES | grep -i 'backend')"
      test -z "$(echo $NOT_AVAILABLES | grep -i 'core')"
      # xvfb-run parsec &
      # sleep 5
      # jobs  # returns error if parsec is not started
      # kill %1
    displayName: 'Test Snap'



- job: 's3_linux_snap_test_xubuntu'
  displayName: 'Never trust a snap'
  dependsOn: s2_linux_snap_build
  timeoutInMinutes: 10
  pool:
    vmImage: 'xubuntu-latest'
  steps:
  # Note there no point specifying Python version given snap doesn't take it into account
  - checkout: none
  - download: current
    artifact: linux_amd64_snap
  - bash: |
      set -eux
      sudo apt-get update
      # TODO: xvfb doesn't currently work
      # sudo apt-get install -y xvfb xorg
      sudo snap install --classic --dangerous $(Pipeline.Workspace)/linux_amd64_snap/parsec*.snap
      parsec.cli --version
      # Make sure snap contains core but not backend
      NOT_AVAILABLES=$(parsec.cli --help | grep -i "not available")
      test "$(echo $NOT_AVAILABLES | grep -i 'backend')"
      test -z "$(echo $NOT_AVAILABLES | grep -i 'core')"
      # xvfb-run parsec &
      # sleep 5
      # jobs  # returns error if parsec is not started
      # kill %1
    displayName: 'Test Snap'
