# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

variables:
  python.version: '3.6'
  postgresql.version: '10'
  winfsp.version: '1.7.20172'
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 -v \
    --cov=parsec --cov-config=setup.cfg --cov-append --cov-report= \
  debug.stress_flaky_tests: 0  # Repeat all flaky tests X times

jobs:


#################################################################################
# Step 0: Wheel build


- job: 's0_build_wheel'
  displayName: 'Build wheel'
  timeoutInMinutes: 10
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      python --version
      pip install -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      python setup.py bdist_wheel
    displayName: 'Build Wheel'
  - publish: dist/
    artifact: wheel


#################################################################################
# Step 1: Tests




- job: 's1_windows_test'
  displayName: 'Windows tests'
  dependsOn: s0_build_wheel
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'
  variables:
    PGINSTALLATION: C:\\Program Files\\PostgreSQL\\$(postgresql.version)\\bin
  steps:
  - checkout: self
    submodules: true
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - bash: |
      set -eux
      python.exe --version
      pip install -r pre-requirements.txt
      choco install -y --limit-output winfsp --pre --version=$(winfsp.version)
      # Install winfsp-test and put it in PATH
      mkdir winfsp-test
      curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.7/winfsp-tests-1.7.20172.zip -o winfsp-test/winfsp-tests.zip
      unzip winfsp-test/winfsp-tests.zip -d winfsp-test
      echo "##vso[task.prependpath]$(Build.SourcesDirectory)\\winfsp-test"
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the parsec folder from the source to force use of the wheel
      rm -rf parsec
      # Install the parsec wheel with all dependencies
      WHEEL_DIRECTORY=`python -c 'print(r"$(Pipeline.Workspace)/wheel".replace("\\\\", "/"))'`
      WHEEL=$(ls $WHEEL_DIRECTORY/parsec_cloud-*.whl)
      echo $WHEEL
      pip install $WHEEL[all]
      # Check dependency compatibility
      pip check parsec[all]
      # Check winfsp-tests availability
      python.exe -c "import winfspy.tests.winfsp_tests"
    displayName: 'Install'
  - bash: |
      set -eux
      pip install pytest-repeat
      py.test $(pytest.base_args) \
        tests --runmountpoint --runslow --rungui -m gui -x -k test_claim_user_invitation_cancelled --count 100
    displayName: 'Tests GUI'

